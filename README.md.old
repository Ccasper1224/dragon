# DRAGON

## Usage

```
mix build
```

## Docs

.dragon/ folder for all the dragon bits
.dragon/config.yml for this file

Context — the data available to a specific render.

 * anything in .dragon/context becomes part of the context, with names based
   on filename, except where that name is reserved.
 * Reserved:
   - `@page` — anything in the page's metadata context (aka header matter)

Example:
   File:  .dragon/context/foo/bar/baz.yml becomes in context:
          foo.bar.baz.*

## ADHOC NOTES

* Look into: EEX supporting multi-line elixir

<% if this do
     blah = bar
   end %>

* Look into how EEX handles whitespace (compare to liquid dash {{- blah }})

* Plugin that does image resizing / specs on the fly, rather than ahead?

#### todo

- make some plugins

- serve - bandit? <lower>
- separate dragon app to standalone (future)
- create mix server - "dev / preview" engine - rebuild on file change
- add some custom filters such as date format (?)

enrichment ideas (these are less important b/c you have embedded elixir):
 * `page.postprocess` which is either nil or "markdown"
 * `page.date.`{published, modified} which come from:
    - page.date.published is extracted from a datestamp in the first part
      of the filename, unless it's explicitly defined in the metadata.
    - page.date.modified comes from the page file's timestamp, unless it's
      explicitly defined in the metadata.
 * `page.previous` and `page.next` — if page is part of collection, this is
   the next or previous page's context relative to the current page in order
   as sorted by page.date.published
 * `page.path` - the ABS path of the file

#### commands

run build
```
mix build
```

render templates
```
mix render
```

copy static files
```
mix copy
```

run plugins
```
mix plugins
```

see context and config data
```
mix debug
```

for development run a dev server and rerender on changes
node tools that do that are `http-server` and `onchange`

```
bash serve.sh
```

```
bash watch.sh
```
